{"ast":null,"code":"var _jsxFileName = \"/home/faha/local-repo/journey-to-react/3. Tenzies/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport './css/style.min.css';\nimport Die from './Die';\nimport { nanoid } from 'nanoid';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function App() {\n  _s();\n\n  const [dice, setDice] = React.useState(allNewDice());\n\n  function allNewDice() {\n    const newDice = [];\n\n    for (let i = 0; i < 10; i++) {\n      newDice.push({\n        value: Math.ceil(Math.random() * 6),\n        isHeld: false,\n        id: nanoid()\n      });\n    }\n\n    return newDice;\n  }\n\n  function rollDice() {\n    setDice(allNewDice());\n  }\n  /**\n   * Challenge: Update the `holdDice` function to flip\n   * the `isHeld` property on the object in the array\n   * that was clicked, based on the `id` prop passed\n   * into the function.\n   *\n   * Hint: as usual, there's > 1 way to accomplish this.\n   * I'll be using `dice.map()` and checking for the `id`\n   * of the die to determine which one to flip `isHeld` on,\n   * but you can do whichever way makes the most sense to you.\n   */\n\n\n  function holdDice(id) {\n    setDice(oldDice => oldDice.map(die => {\n      return die.id === id ? { ...die,\n        isHeld: !die.isHeld\n      } : die;\n    }));\n  }\n\n  const diceElements = dice.map(die => /*#__PURE__*/_jsxDEV(Die, {\n    value: die.value,\n    isHeld: die.isHeld,\n    holdDice: () => holdDice(die.id)\n  }, die.id, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this));\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dice-container\",\n      children: diceElements\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"roll-dice\",\n      onClick: rollDice,\n      children: \"Roll\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"FBcbDbTSXYNs4QNsRKPH911OvUI=\");\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/faha/local-repo/journey-to-react/3. Tenzies/src/App.js"],"names":["React","Die","nanoid","App","dice","setDice","useState","allNewDice","newDice","i","push","value","Math","ceil","random","isHeld","id","rollDice","holdDice","oldDice","map","die","diceElements"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,qBAAP;AACA,OAAOC,GAAP,MAAgB,OAAhB;AACA,SAASC,MAAT,QAAuB,QAAvB;;AAEA,eAAe,SAASC,GAAT,GAAe;AAAA;;AAC5B,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBL,KAAK,CAACM,QAAN,CAAeC,UAAU,EAAzB,CAAxB;;AAEA,WAASA,UAAT,GAAsB;AACpB,UAAMC,OAAO,GAAG,EAAhB;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,EAApB,EAAwBA,CAAC,EAAzB,EAA6B;AAC3BD,MAAAA,OAAO,CAACE,IAAR,CAAa;AACXC,QAAAA,KAAK,EAAEC,IAAI,CAACC,IAAL,CAAUD,IAAI,CAACE,MAAL,KAAgB,CAA1B,CADI;AAEXC,QAAAA,MAAM,EAAE,KAFG;AAGXC,QAAAA,EAAE,EAAEd,MAAM;AAHC,OAAb;AAKD;;AACD,WAAOM,OAAP;AACD;;AAED,WAASS,QAAT,GAAoB;AAClBZ,IAAAA,OAAO,CAACE,UAAU,EAAX,CAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACE,WAASW,QAAT,CAAkBF,EAAlB,EAAsB;AACpBX,IAAAA,OAAO,CAAEc,OAAD,IACNA,OAAO,CAACC,GAAR,CAAaC,GAAD,IAAS;AACnB,aAAOA,GAAG,CAACL,EAAJ,KAAWA,EAAX,GAAgB,EAAE,GAAGK,GAAL;AAAUN,QAAAA,MAAM,EAAE,CAACM,GAAG,CAACN;AAAvB,OAAhB,GAAkDM,GAAzD;AACD,KAFD,CADK,CAAP;AAKD;;AAED,QAAMC,YAAY,GAAGlB,IAAI,CAACgB,GAAL,CAAUC,GAAD,iBAC5B,QAAC,GAAD;AAEE,IAAA,KAAK,EAAEA,GAAG,CAACV,KAFb;AAGE,IAAA,MAAM,EAAEU,GAAG,CAACN,MAHd;AAIE,IAAA,QAAQ,EAAE,MAAMG,QAAQ,CAACG,GAAG,CAACL,EAAL;AAJ1B,KACOK,GAAG,CAACL,EADX;AAAA;AAAA;AAAA;AAAA,UADmB,CAArB;AASA,sBACE;AAAA,4BACE;AAAK,MAAA,SAAS,EAAC,gBAAf;AAAA,gBAAiCM;AAAjC;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAQ,MAAA,SAAS,EAAC,WAAlB;AAA8B,MAAA,OAAO,EAAEL,QAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAQD;;GAvDuBd,G;;KAAAA,G","sourcesContent":["import React from 'react';\nimport './css/style.min.css';\nimport Die from './Die';\nimport { nanoid } from 'nanoid';\n\nexport default function App() {\n  const [dice, setDice] = React.useState(allNewDice());\n\n  function allNewDice() {\n    const newDice = [];\n    for (let i = 0; i < 10; i++) {\n      newDice.push({\n        value: Math.ceil(Math.random() * 6),\n        isHeld: false,\n        id: nanoid()\n      });\n    }\n    return newDice;\n  }\n\n  function rollDice() {\n    setDice(allNewDice());\n  }\n\n  /**\n   * Challenge: Update the `holdDice` function to flip\n   * the `isHeld` property on the object in the array\n   * that was clicked, based on the `id` prop passed\n   * into the function.\n   *\n   * Hint: as usual, there's > 1 way to accomplish this.\n   * I'll be using `dice.map()` and checking for the `id`\n   * of the die to determine which one to flip `isHeld` on,\n   * but you can do whichever way makes the most sense to you.\n   */\n  function holdDice(id) {\n    setDice((oldDice) =>\n      oldDice.map((die) => {\n        return die.id === id ? { ...die, isHeld: !die.isHeld } : die;\n      })\n    );\n  }\n\n  const diceElements = dice.map((die) => (\n    <Die\n      key={die.id}\n      value={die.value}\n      isHeld={die.isHeld}\n      holdDice={() => holdDice(die.id)}\n    />\n  ));\n\n  return (\n    <main>\n      <div className=\"dice-container\">{diceElements}</div>\n      <button className=\"roll-dice\" onClick={rollDice}>\n        Roll\n      </button>\n    </main>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}